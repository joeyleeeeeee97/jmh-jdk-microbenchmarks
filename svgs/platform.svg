<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="597"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="597"> </text>
<g id="frames">
<g>
<title>all (1,565 samples, 100.00%)</title><rect x="10.0" y="563.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="574.0">all</text>
</g>
<g>
<title>[no_Java_frame] (6 samples, 0.38%)</title><rect x="10.0" y="547.0" width="4.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.83%)</title><rect x="14.5" y="547.0" width="9.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="17.5" y="558.0"></text>
</g>
<g>
<title>__lll_lock_wait_private (1 samples, 0.06%)</title><rect x="14.5" y="531.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="17.5" y="542.0"></text>
</g>
<g>
<title>system_call_fastpath (1 samples, 0.06%)</title><rect x="14.5" y="515.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="17.5" y="526.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.06%)</title><rect x="14.5" y="499.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="17.5" y="510.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.06%)</title><rect x="14.5" y="483.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="17.5" y="494.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.06%)</title><rect x="14.5" y="467.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="17.5" y="478.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.06%)</title><rect x="14.5" y="451.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="17.5" y="462.0"></text>
</g>
<g>
<title>_int_free (12 samples, 0.77%)</title><rect x="15.3" y="531.0" width="9.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="18.3" y="542.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.06%)</title><rect x="24.3" y="547.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="27.3" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH.0x0000000800114800.invoke (1 samples, 0.06%)</title><rect x="24.3" y="531.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.3" y="542.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.06%)</title><rect x="25.1" y="547.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="28.1" y="558.0"></text>
</g>
<g>
<title>system_call_after_swapgs (1 samples, 0.06%)</title><rect x="25.1" y="531.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="28.1" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,452 samples, 92.78%)</title><rect x="25.8" y="547.0" width="1094.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.8" y="558.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,452 samples, 92.78%)</title><rect x="25.8" y="531.0" width="1094.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.8" y="542.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,452 samples, 92.78%)</title><rect x="25.8" y="515.0" width="1094.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.8" y="526.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (1,452 samples, 92.78%)</title><rect x="25.8" y="499.0" width="1094.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.8" y="510.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (1,452 samples, 92.78%)</title><rect x="25.8" y="483.0" width="1094.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.8" y="494.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (1,452 samples, 92.78%)</title><rect x="25.8" y="467.0" width="1094.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.8" y="478.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (1,452 samples, 92.78%)</title><rect x="25.8" y="451.0" width="1094.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.8" y="462.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (1,452 samples, 92.78%)</title><rect x="25.8" y="435.0" width="1094.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.8" y="446.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1,452 samples, 92.78%)</title><rect x="25.8" y="419.0" width="1094.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.8" y="430.0">java/lang/reflect/Method.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/DirectMethodHandleAccessor.invoke (1,452 samples, 92.78%)</title><rect x="25.8" y="403.0" width="1094.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.8" y="414.0">jdk/internal/reflect/DirectMethodHandleAccessor.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/DirectMethodHandleAccessor.invokeImpl (1,452 samples, 92.78%)</title><rect x="25.8" y="387.0" width="1094.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.8" y="398.0">jdk/internal/reflect/DirectMethodHandleAccessor.invokeImpl</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH.0x0000000800111800.invokeExact_MT (1,452 samples, 92.78%)</title><rect x="25.8" y="371.0" width="1094.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.8" y="382.0">java/lang/invoke/LambdaForm$MH.0x0000000800111800.invokeExact_MT</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH.0x0000000800111400.invoke (1,452 samples, 92.78%)</title><rect x="25.8" y="355.0" width="1094.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.8" y="366.0">java/lang/invoke/LambdaForm$MH.0x0000000800111400.invoke</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH.0x0000000800001800.invokeSpecial (1,452 samples, 92.78%)</title><rect x="25.8" y="339.0" width="1094.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.8" y="350.0">java/lang/invoke/LambdaForm$DMH.0x0000000800001800.invokeSpecial</text>
</g>
<g>
<title>org/openjdk/bench/java/lang/thread/generated/ThreadBench_threadStart_jmhTest.threadStart_AverageTime (1,452 samples, 92.78%)</title><rect x="25.8" y="323.0" width="1094.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.8" y="334.0">org/openjdk/bench/java/lang/thread/generated/ThreadBench_threadStart_jmhTest.threadStart_AverageTime</text>
</g>
<g>
<title>org/openjdk/bench/java/lang/thread/generated/ThreadBench_threadStart_jmhTest.threadStart_avgt_jmhStub (1,452 samples, 92.78%)</title><rect x="25.8" y="307.0" width="1094.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.8" y="318.0">org/openjdk/bench/java/lang/thread/generated/ThreadBench_threadStart_jmhTest.threadStart_avgt_jmhStub</text>
</g>
<g>
<title>org/openjdk/bench/java/lang/thread/ThreadBench.threadStart (1,452 samples, 92.78%)</title><rect x="25.8" y="291.0" width="1094.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.8" y="302.0">org/openjdk/bench/java/lang/thread/ThreadBench.threadStart</text>
</g>
<g>
<title>java/lang/Thread.join (94 samples, 6.01%)</title><rect x="25.8" y="275.0" width="70.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.8" y="286.0">java/lan..</text>
</g>
<g>
<title>java/lang/Thread.join (94 samples, 6.01%)</title><rect x="25.8" y="259.0" width="70.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.8" y="270.0">java/lan..</text>
</g>
<g>
<title>java/lang/Object.wait (88 samples, 5.62%)</title><rect x="25.8" y="243.0" width="66.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.8" y="254.0">java/la..</text>
</g>
<g>
<title>java/lang/Object.wait0 (85 samples, 5.43%)</title><rect x="25.8" y="227.0" width="64.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.8" y="238.0">java/la..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;548964ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 548964ul&gt;::oop_access_barrier(void*) (1 samples, 0.06%)</title><rect x="28.1" y="211.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="31.1" y="222.0"></text>
</g>
<g>
<title>HandleArea::real_allocate_handle(oopDesc*) (1 samples, 0.06%)</title><rect x="28.8" y="211.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="31.8" y="222.0"></text>
</g>
<g>
<title>JVM_MonitorWait (67 samples, 4.28%)</title><rect x="29.6" y="211.0" width="50.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="32.6" y="222.0">JVM_M..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;548964ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 548964ul&gt;::oop_access_barrier(void*) (2 samples, 0.13%)</title><rect x="30.4" y="195.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="33.4" y="206.0"></text>
</g>
<g>
<title>JavaThreadInObjectWaitState::JavaThreadInObjectWaitState(JavaThread*, bool) (4 samples, 0.26%)</title><rect x="31.9" y="195.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="34.9" y="206.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;286822ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 286822ul&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.06%)</title><rect x="33.4" y="179.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="36.4" y="190.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.06%)</title><rect x="34.1" y="179.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="37.1" y="190.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, JavaThread*) (56 samples, 3.58%)</title><rect x="34.9" y="195.0" width="42.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="37.9" y="206.0">Obje..</text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, JavaThread*) (52 samples, 3.32%)</title><rect x="34.9" y="179.0" width="39.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="37.9" y="190.0">Obj..</text>
</g>
<g>
<title>ObjectMonitor::ReenterI(JavaThread*, ObjectWaiter*) (6 samples, 0.38%)</title><rect x="37.1" y="163.0" width="4.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="40.1" y="174.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="41.7" y="163.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="44.7" y="174.0"></text>
</g>
<g>
<title>ThreadBlockInVMPreprocess&lt;ObjectMonitor::ClearSuccOnSuspend&gt;::~ThreadBlockInVMPreprocess() (2 samples, 0.13%)</title><rect x="42.4" y="163.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="45.4" y="174.0"></text>
</g>
<g>
<title>__lll_unlock_wake (27 samples, 1.73%)</title><rect x="43.9" y="163.0" width="20.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="46.9" y="174.0"></text>
</g>
<g>
<title>system_call_fastpath (23 samples, 1.47%)</title><rect x="46.9" y="147.0" width="17.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="49.9" y="158.0"></text>
</g>
<g>
<title>sys_futex (23 samples, 1.47%)</title><rect x="46.9" y="131.0" width="17.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="49.9" y="142.0"></text>
</g>
<g>
<title>do_futex (22 samples, 1.41%)</title><rect x="46.9" y="115.0" width="16.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="49.9" y="126.0"></text>
</g>
<g>
<title>futex_wake (21 samples, 1.34%)</title><rect x="46.9" y="99.0" width="15.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="49.9" y="110.0"></text>
</g>
<g>
<title>get_futex_key (21 samples, 1.34%)</title><rect x="46.9" y="83.0" width="15.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="49.9" y="94.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.11 (21 samples, 1.34%)</title><rect x="46.9" y="67.0" width="15.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="49.9" y="78.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.06%)</title><rect x="62.8" y="99.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="65.8" y="110.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.06%)</title><rect x="63.5" y="115.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="66.5" y="126.0"></text>
</g>
<g>
<title>__pthread_cond_wait (10 samples, 0.64%)</title><rect x="64.3" y="163.0" width="7.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="67.3" y="174.0"></text>
</g>
<g>
<title>system_call_fastpath (9 samples, 0.58%)</title><rect x="65.0" y="147.0" width="6.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="68.0" y="158.0"></text>
</g>
<g>
<title>sys_futex (9 samples, 0.58%)</title><rect x="65.0" y="131.0" width="6.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="68.0" y="142.0"></text>
</g>
<g>
<title>do_futex (9 samples, 0.58%)</title><rect x="65.0" y="115.0" width="6.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="68.0" y="126.0"></text>
</g>
<g>
<title>futex_wait (9 samples, 0.58%)</title><rect x="65.0" y="99.0" width="6.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="68.0" y="110.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.13%)</title><rect x="66.5" y="83.0" width="1.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="69.5" y="94.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.06%)</title><rect x="67.3" y="67.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="70.3" y="78.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.06%)</title><rect x="67.3" y="51.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="70.3" y="62.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.06%)</title><rect x="67.3" y="35.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="70.3" y="46.0"></text>
</g>
<g>
<title>futex_wait_setup (4 samples, 0.26%)</title><rect x="68.1" y="83.0" width="3.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="71.1" y="94.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.06%)</title><rect x="71.1" y="83.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="74.1" y="94.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.13%)</title><rect x="71.8" y="163.0" width="1.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="74.8" y="174.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.06%)</title><rect x="73.3" y="163.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="76.3" y="174.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (3 samples, 0.19%)</title><rect x="74.1" y="179.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="77.1" y="190.0"></text>
</g>
<g>
<title>ObjectMonitor::ObjectMonitor(oopDesc*) (3 samples, 0.19%)</title><rect x="74.1" y="163.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="77.1" y="174.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;598116ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 598116ul&gt;::oop_access_barrier(void*, oopDesc*) (2 samples, 0.13%)</title><rect x="74.1" y="147.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="77.1" y="158.0"></text>
</g>
<g>
<title>WeakHandle::WeakHandle(OopStorage*, oopDesc*) (1 samples, 0.06%)</title><rect x="75.6" y="147.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="78.6" y="158.0"></text>
</g>
<g>
<title>OopStorage::allocate() (1 samples, 0.06%)</title><rect x="75.6" y="131.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="78.6" y="142.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, JavaThreadStatus) (1 samples, 0.06%)</title><rect x="76.4" y="179.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="79.4" y="190.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (4 samples, 0.26%)</title><rect x="77.1" y="195.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="80.1" y="206.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.45%)</title><rect x="80.1" y="211.0" width="5.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="83.1" y="222.0"></text>
</g>
<g>
<title>_int_malloc (7 samples, 0.45%)</title><rect x="80.1" y="195.0" width="5.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="83.1" y="206.0"></text>
</g>
<g>
<title>__GI___libc_malloc (4 samples, 0.26%)</title><rect x="85.4" y="211.0" width="3.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="88.4" y="222.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.13%)</title><rect x="88.4" y="211.0" width="1.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="91.4" y="222.0"></text>
</g>
<g>
<title>system_call_after_swapgs (2 samples, 0.13%)</title><rect x="88.4" y="195.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="91.4" y="206.0"></text>
</g>
<g>
<title>java/lang/Thread.isAlive0 (3 samples, 0.19%)</title><rect x="89.9" y="227.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.9" y="238.0"></text>
</g>
<g>
<title>java/lang/Thread.isAlive (6 samples, 0.38%)</title><rect x="92.2" y="243.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="95.2" y="254.0"></text>
</g>
<g>
<title>java/lang/Thread.isAlive0 (6 samples, 0.38%)</title><rect x="92.2" y="227.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="95.2" y="238.0"></text>
</g>
<g>
<title>JVM_IsThreadAlive (4 samples, 0.26%)</title><rect x="92.9" y="211.0" width="3.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="95.9" y="222.0"></text>
</g>
<g>
<title>java_lang_Thread::is_alive(oopDesc*) (1 samples, 0.06%)</title><rect x="96.0" y="211.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="99.0" y="222.0"></text>
</g>
<g>
<title>java/lang/Thread.start (1,352 samples, 86.39%)</title><rect x="96.7" y="275.0" width="1019.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.7" y="286.0">java/lang/Thread.start</text>
</g>
<g>
<title>java/lang/Thread.start0 (1,349 samples, 86.20%)</title><rect x="96.7" y="259.0" width="1017.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.7" y="270.0">java/lang/Thread.start0</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;548964ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 548964ul&gt;::oop_access_barrier(void*) (1 samples, 0.06%)</title><rect x="96.7" y="243.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="99.7" y="254.0"></text>
</g>
<g>
<title>EscapeBarrier::thread_added(JavaThread*) (1 samples, 0.06%)</title><rect x="97.5" y="243.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="100.5" y="254.0"></text>
</g>
<g>
<title>JVM_StartThread (417 samples, 26.65%)</title><rect x="98.2" y="243.0" width="314.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="101.2" y="254.0">JVM_StartThread</text>
</g>
<g>
<title>EscapeBarrier::thread_added(JavaThread*) (6 samples, 0.38%)</title><rect x="100.5" y="227.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="103.5" y="238.0"></text>
</g>
<g>
<title>Mutex::lock_without_safepoint_check() (1 samples, 0.06%)</title><rect x="100.5" y="211.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="103.5" y="222.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.06%)</title><rect x="100.5" y="195.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="103.5" y="206.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (5 samples, 0.32%)</title><rect x="101.2" y="211.0" width="3.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="104.2" y="222.0"></text>
</g>
<g>
<title>JavaThread::JavaThread(void (*)(JavaThread*, JavaThread*), unsigned long) (54 samples, 3.45%)</title><rect x="105.0" y="227.0" width="40.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="108.0" y="238.0">Jav..</text>
</g>
<g>
<title>JavaThread::JavaThread() (50 samples, 3.19%)</title><rect x="105.0" y="211.0" width="37.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="108.0" y="222.0">Jav..</text>
</g>
<g>
<title>BarrierSetNMethod::disarmed_value() const (1 samples, 0.06%)</title><rect x="105.0" y="195.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="108.0" y="206.0"></text>
</g>
<g>
<title>HandshakeState::HandshakeState(JavaThread*) (7 samples, 0.45%)</title><rect x="105.8" y="195.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="108.8" y="206.0"></text>
</g>
<g>
<title>Mutex::Mutex(Mutex::Rank, char const*, bool) (7 samples, 0.45%)</title><rect x="105.8" y="179.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="108.8" y="190.0"></text>
</g>
<g>
<title>__strlen_sse2_pminub (6 samples, 0.38%)</title><rect x="105.8" y="163.0" width="4.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="108.8" y="174.0"></text>
</g>
<g>
<title>os::PlatformMonitor::PlatformMonitor() (1 samples, 0.06%)</title><rect x="110.3" y="163.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="113.3" y="174.0"></text>
</g>
<g>
<title>JfrThreadLocal::JfrThreadLocal() (1 samples, 0.06%)</title><rect x="111.0" y="195.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="114.0" y="206.0"></text>
</g>
<g>
<title>ParkEvent::Allocate(Thread*) (4 samples, 0.26%)</title><rect x="111.8" y="195.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="114.8" y="206.0"></text>
</g>
<g>
<title>Thread::SpinAcquire(int volatile*, char const*) (8 samples, 0.51%)</title><rect x="114.8" y="195.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="117.8" y="206.0"></text>
</g>
<g>
<title>Thread::Thread() (27 samples, 1.73%)</title><rect x="120.8" y="195.0" width="20.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="123.8" y="206.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MEMFLAGS, AllocFailStrategy::AllocFailEnum) (1 samples, 0.06%)</title><rect x="122.3" y="179.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="125.3" y="190.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MEMFLAGS, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.06%)</title><rect x="123.1" y="179.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="126.1" y="190.0"></text>
</g>
<g>
<title>Arena::Arena(MEMFLAGS) (9 samples, 0.58%)</title><rect x="123.9" y="179.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="126.9" y="190.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.06%)</title><rect x="128.4" y="163.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="131.4" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.13%)</title><rect x="129.1" y="163.0" width="1.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="132.1" y="174.0"></text>
</g>
<g>
<title>Arena::Arena(MEMFLAGS, unsigned long) (5 samples, 0.32%)</title><rect x="130.6" y="179.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="133.6" y="190.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.06%)</title><rect x="132.1" y="163.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="135.1" y="174.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.06%)</title><rect x="132.9" y="163.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="135.9" y="174.0"></text>
</g>
<g>
<title>system_call_fastpath (1 samples, 0.06%)</title><rect x="132.9" y="147.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="135.9" y="158.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.06%)</title><rect x="132.9" y="131.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="135.9" y="142.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.06%)</title><rect x="132.9" y="115.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="135.9" y="126.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.06%)</title><rect x="132.9" y="99.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="135.9" y="110.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.06%)</title><rect x="132.9" y="83.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="135.9" y="94.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.06%)</title><rect x="132.9" y="67.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="135.9" y="78.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.06%)</title><rect x="133.7" y="163.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="136.7" y="174.0"></text>
</g>
<g>
<title>Arena::operator new(unsigned long, MEMFLAGS) (1 samples, 0.06%)</title><rect x="134.4" y="179.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="137.4" y="190.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MEMFLAGS, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.06%)</title><rect x="134.4" y="163.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="137.4" y="174.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&amp;) (1 samples, 0.06%)</title><rect x="134.4" y="147.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="137.4" y="158.0"></text>
</g>
<g>
<title>G1BarrierSet::on_thread_create(Thread*) (1 samples, 0.06%)</title><rect x="135.2" y="179.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="138.2" y="190.0"></text>
</g>
<g>
<title>PtrQueue::PtrQueue(PtrQueueSet*) (1 samples, 0.06%)</title><rect x="135.2" y="163.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="138.2" y="174.0"></text>
</g>
<g>
<title>JfrThreadLocal::JfrThreadLocal() (1 samples, 0.06%)</title><rect x="135.9" y="179.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="138.9" y="190.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.06%)</title><rect x="135.9" y="163.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="138.9" y="174.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.06%)</title><rect x="135.9" y="147.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="138.9" y="158.0"></text>
</g>
<g>
<title>ParkEvent::Allocate(Thread*) (3 samples, 0.19%)</title><rect x="136.7" y="179.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="139.7" y="190.0"></text>
</g>
<g>
<title>Thread::SpinAcquire(int volatile*, char const*) (1 samples, 0.06%)</title><rect x="138.2" y="163.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="141.2" y="174.0"></text>
</g>
<g>
<title>Thread::SpinAcquire(int volatile*, char const*) (2 samples, 0.13%)</title><rect x="138.9" y="179.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="141.9" y="190.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.06%)</title><rect x="140.4" y="179.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="143.4" y="190.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.06%)</title><rect x="140.4" y="163.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="143.4" y="174.0"></text>
</g>
<g>
<title>ThreadHeapSampler::pick_next_sample(unsigned long) (1 samples, 0.06%)</title><rect x="141.2" y="195.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="144.2" y="206.0"></text>
</g>
<g>
<title>os::random() (1 samples, 0.06%)</title><rect x="141.9" y="195.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="144.9" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::initialize_header(JavaThread*) (3 samples, 0.19%)</title><rect x="142.7" y="211.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="145.7" y="222.0"></text>
</g>
<g>
<title>ThreadStatistics::ThreadStatistics() (1 samples, 0.06%)</title><rect x="145.0" y="211.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="148.0" y="222.0"></text>
</g>
<g>
<title>JavaThread::prepare(_jobject*, ThreadPriority) (25 samples, 1.60%)</title><rect x="145.7" y="227.0" width="18.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="148.7" y="238.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;548964ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 548964ul&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.06%)</title><rect x="149.5" y="211.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="152.5" y="222.0"></text>
</g>
<g>
<title>JavaThread::set_threadOopHandles(oopDesc*) (19 samples, 1.21%)</title><rect x="150.2" y="211.0" width="14.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="153.2" y="222.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;548964ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 548964ul&gt;::oop_access_barrier(void*, oopDesc*) (2 samples, 0.13%)</title><rect x="151.0" y="195.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="154.0" y="206.0"></text>
</g>
<g>
<title>OopStorage::allocate() (15 samples, 0.96%)</title><rect x="152.5" y="195.0" width="11.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="155.5" y="206.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (6 samples, 0.38%)</title><rect x="158.5" y="179.0" width="4.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="161.5" y="190.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.06%)</title><rect x="163.1" y="179.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="166.1" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.06%)</title><rect x="163.8" y="195.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="166.8" y="206.0"></text>
</g>
<g>
<title>Thread::start(Thread*) (3 samples, 0.19%)</title><rect x="164.6" y="227.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="167.6" y="238.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;286822ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 286822ul&gt;::oop_access_barrier(oopDesc*, long) (3 samples, 0.19%)</title><rect x="164.6" y="211.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="167.6" y="222.0"></text>
</g>
<g>
<title>Threads::add(JavaThread*, bool) (176 samples, 11.25%)</title><rect x="166.8" y="227.0" width="132.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="169.8" y="238.0">Threads::add(Jav..</text>
</g>
<g>
<title>Events::log(Thread*, char const*, ...) (10 samples, 0.64%)</title><rect x="168.3" y="211.0" width="7.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="171.3" y="222.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (5 samples, 0.32%)</title><rect x="169.8" y="195.0" width="3.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="172.8" y="206.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.13%)</title><rect x="173.6" y="195.0" width="1.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="176.6" y="206.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.13%)</title><rect x="173.6" y="179.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="176.6" y="190.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 0.06%)</title><rect x="175.1" y="195.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="178.1" y="206.0"></text>
</g>
<g>
<title>ThreadService::add_thread(JavaThread*, bool) (15 samples, 0.96%)</title><rect x="175.9" y="211.0" width="11.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="178.9" y="222.0"></text>
</g>
<g>
<title>ThreadsSMRSupport::add_thread(JavaThread*) (148 samples, 9.46%)</title><rect x="187.2" y="211.0" width="111.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="190.2" y="222.0">ThreadsSMRSup..</text>
</g>
<g>
<title>ResourceObj::operator delete(void*) (1 samples, 0.06%)</title><rect x="191.7" y="195.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="194.7" y="206.0"></text>
</g>
<g>
<title>ThreadsSMRSupport::free_list(ThreadsList*) (131 samples, 8.37%)</title><rect x="192.5" y="195.0" width="98.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="195.5" y="206.0">ThreadsSMRSu..</text>
</g>
<g>
<title>NonJavaThread::Iterator::Iterator() (8 samples, 0.51%)</title><rect x="235.4" y="179.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="238.4" y="190.0"></text>
</g>
<g>
<title>NonJavaThread::Iterator::step() (16 samples, 1.02%)</title><rect x="241.5" y="179.0" width="12.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="244.5" y="190.0"></text>
</g>
<g>
<title>NonJavaThread::Iterator::~Iterator() (1 samples, 0.06%)</title><rect x="253.5" y="179.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="256.5" y="190.0"></text>
</g>
<g>
<title>Threads::non_java_threads_do(ThreadClosure*) (34 samples, 2.17%)</title><rect x="254.3" y="179.0" width="25.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="257.3" y="190.0">T..</text>
</g>
<g>
<title>ScanHazardPtrGatherThreadsListClosure::do_thread(Thread*) (29 samples, 1.85%)</title><rect x="258.1" y="163.0" width="21.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="261.1" y="174.0">S..</text>
</g>
<g>
<title>ValidateHazardPtrsClosure::do_thread(Thread*) (11 samples, 0.70%)</title><rect x="279.9" y="179.0" width="8.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="282.9" y="190.0"></text>
</g>
<g>
<title>os::free(void*) (4 samples, 0.26%)</title><rect x="288.2" y="179.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="291.2" y="190.0"></text>
</g>
<g>
<title>__libc_free (2 samples, 0.13%)</title><rect x="291.2" y="195.0" width="1.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="294.2" y="206.0"></text>
</g>
<g>
<title>__memset_sse2 (7 samples, 0.45%)</title><rect x="292.7" y="195.0" width="5.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="295.7" y="206.0"></text>
</g>
<g>
<title>os::free(void*) (1 samples, 0.06%)</title><rect x="298.0" y="195.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="301.0" y="206.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.06%)</title><rect x="298.8" y="211.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="301.8" y="222.0"></text>
</g>
<g>
<title>__libc_free (2 samples, 0.13%)</title><rect x="299.5" y="227.0" width="1.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="302.5" y="238.0"></text>
</g>
<g>
<title>__lll_lock_wait (18 samples, 1.15%)</title><rect x="301.0" y="227.0" width="13.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="304.0" y="238.0"></text>
</g>
<g>
<title>system_call_fastpath (17 samples, 1.09%)</title><rect x="301.8" y="211.0" width="12.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="304.8" y="222.0"></text>
</g>
<g>
<title>sys_futex (17 samples, 1.09%)</title><rect x="301.8" y="195.0" width="12.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="304.8" y="206.0"></text>
</g>
<g>
<title>do_futex (17 samples, 1.09%)</title><rect x="301.8" y="179.0" width="12.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="304.8" y="190.0"></text>
</g>
<g>
<title>futex_wait (16 samples, 1.02%)</title><rect x="301.8" y="163.0" width="12.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="304.8" y="174.0"></text>
</g>
<g>
<title>_raw_spin_unlock (1 samples, 0.06%)</title><rect x="301.8" y="147.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="304.8" y="158.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.06%)</title><rect x="302.5" y="147.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="305.5" y="158.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.06%)</title><rect x="302.5" y="131.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="305.5" y="142.0"></text>
</g>
<g>
<title>futex_wait_setup (14 samples, 0.89%)</title><rect x="303.3" y="147.0" width="10.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="306.3" y="158.0"></text>
</g>
<g>
<title>_raw_spin_lock (2 samples, 0.13%)</title><rect x="307.1" y="131.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="310.1" y="142.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (3 samples, 0.19%)</title><rect x="308.6" y="131.0" width="2.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="311.6" y="142.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.06%)</title><rect x="310.8" y="131.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="313.8" y="142.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.11 (1 samples, 0.06%)</title><rect x="310.8" y="115.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="313.8" y="126.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.11 (1 samples, 0.06%)</title><rect x="311.6" y="131.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="314.6" y="142.0"></text>
</g>
<g>
<title>get_futex_value_locked (2 samples, 0.13%)</title><rect x="312.4" y="131.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="315.4" y="142.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.06%)</title><rect x="313.9" y="163.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="316.9" y="174.0"></text>
</g>
<g>
<title>__lll_unlock_wake (37 samples, 2.36%)</title><rect x="314.6" y="227.0" width="27.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="317.6" y="238.0">_..</text>
</g>
<g>
<title>system_call_fastpath (37 samples, 2.36%)</title><rect x="314.6" y="211.0" width="27.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="317.6" y="222.0">s..</text>
</g>
<g>
<title>sys_futex (37 samples, 2.36%)</title><rect x="314.6" y="195.0" width="27.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="317.6" y="206.0">s..</text>
</g>
<g>
<title>do_futex (37 samples, 2.36%)</title><rect x="314.6" y="179.0" width="27.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="317.6" y="190.0">d..</text>
</g>
<g>
<title>futex_wake (36 samples, 2.30%)</title><rect x="315.4" y="163.0" width="27.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="318.4" y="174.0">f..</text>
</g>
<g>
<title>get_futex_key (22 samples, 1.41%)</title><rect x="325.9" y="147.0" width="16.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="328.9" y="158.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.11 (21 samples, 1.34%)</title><rect x="326.7" y="131.0" width="15.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="329.7" y="142.0"></text>
</g>
<g>
<title>__pthread_cond_signal (56 samples, 3.58%)</title><rect x="342.5" y="227.0" width="42.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="345.5" y="238.0">__pt..</text>
</g>
<g>
<title>system_call_fastpath (55 samples, 3.51%)</title><rect x="343.3" y="211.0" width="41.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="346.3" y="222.0">sys..</text>
</g>
<g>
<title>sys_futex (55 samples, 3.51%)</title><rect x="343.3" y="195.0" width="41.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="346.3" y="206.0">sys..</text>
</g>
<g>
<title>do_futex (54 samples, 3.45%)</title><rect x="344.0" y="179.0" width="40.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="347.0" y="190.0">do_..</text>
</g>
<g>
<title>futex_wake_op (54 samples, 3.45%)</title><rect x="344.0" y="163.0" width="40.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="347.0" y="174.0">fut..</text>
</g>
<g>
<title>_raw_spin_lock (3 samples, 0.19%)</title><rect x="349.3" y="147.0" width="2.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="352.3" y="158.0"></text>
</g>
<g>
<title>drop_futex_key_refs.isra.12 (1 samples, 0.06%)</title><rect x="351.6" y="147.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="354.6" y="158.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.06%)</title><rect x="352.3" y="147.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="355.3" y="158.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.11 (1 samples, 0.06%)</title><rect x="352.3" y="131.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="355.3" y="142.0"></text>
</g>
<g>
<title>wake_futex (42 samples, 2.68%)</title><rect x="353.1" y="147.0" width="31.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="356.1" y="158.0">wa..</text>
</g>
<g>
<title>__unqueue_futex (3 samples, 0.19%)</title><rect x="355.3" y="131.0" width="2.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="358.3" y="142.0"></text>
</g>
<g>
<title>wake_up_state (36 samples, 2.30%)</title><rect x="357.6" y="131.0" width="27.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="360.6" y="142.0">w..</text>
</g>
<g>
<title>try_to_wake_up (36 samples, 2.30%)</title><rect x="357.6" y="115.0" width="27.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="360.6" y="126.0">t..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (36 samples, 2.30%)</title><rect x="357.6" y="99.0" width="27.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="360.6" y="110.0">_..</text>
</g>
<g>
<title>getpagesize (2 samples, 0.13%)</title><rect x="384.7" y="227.0" width="1.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="387.7" y="238.0"></text>
</g>
<g>
<title>oopDesc::address_field_put(int, unsigned char*) (2 samples, 0.13%)</title><rect x="386.2" y="227.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="389.2" y="238.0"></text>
</g>
<g>
<title>os::create_thread(Thread*, os::ThreadType, unsigned long) (29 samples, 1.85%)</title><rect x="387.8" y="227.0" width="21.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="390.8" y="238.0">o..</text>
</g>
<g>
<title>AllocateHeap(unsigned long, MEMFLAGS, AllocFailStrategy::AllocFailEnum) (1 samples, 0.06%)</title><rect x="389.3" y="211.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="392.3" y="222.0"></text>
</g>
<g>
<title>Monitor::wait_without_safepoint_check(long) (12 samples, 0.77%)</title><rect x="390.0" y="211.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="393.0" y="222.0"></text>
</g>
<g>
<title>__pthread_cond_wait (10 samples, 0.64%)</title><rect x="390.0" y="195.0" width="7.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="393.0" y="206.0"></text>
</g>
<g>
<title>system_call_fastpath (10 samples, 0.64%)</title><rect x="390.0" y="179.0" width="7.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="393.0" y="190.0"></text>
</g>
<g>
<title>sys_futex (10 samples, 0.64%)</title><rect x="390.0" y="163.0" width="7.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="393.0" y="174.0"></text>
</g>
<g>
<title>do_futex (10 samples, 0.64%)</title><rect x="390.0" y="147.0" width="7.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="393.0" y="158.0"></text>
</g>
<g>
<title>futex_wait (10 samples, 0.64%)</title><rect x="390.0" y="131.0" width="7.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="393.0" y="142.0"></text>
</g>
<g>
<title>futex_wait_setup (9 samples, 0.58%)</title><rect x="390.8" y="115.0" width="6.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="393.8" y="126.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.06%)</title><rect x="393.8" y="99.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="396.8" y="110.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.06%)</title><rect x="394.5" y="99.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="397.5" y="110.0"></text>
</g>
<g>
<title>get_futex_key (3 samples, 0.19%)</title><rect x="395.3" y="99.0" width="2.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="398.3" y="110.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.11 (3 samples, 0.19%)</title><rect x="395.3" y="83.0" width="2.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="398.3" y="94.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.06%)</title><rect x="397.6" y="195.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="400.6" y="206.0"></text>
</g>
<g>
<title>os::PlatformMonitor::wait(long) (1 samples, 0.06%)</title><rect x="398.3" y="195.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="401.3" y="206.0"></text>
</g>
<g>
<title>OSThread::OSThread(int (*)(void*), void*) (7 samples, 0.45%)</title><rect x="399.1" y="211.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="402.1" y="222.0"></text>
</g>
<g>
<title>OSThread::pd_initialize() (7 samples, 0.45%)</title><rect x="399.1" y="195.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="402.1" y="206.0"></text>
</g>
<g>
<title>Mutex::Mutex(Mutex::Rank, char const*, bool) (5 samples, 0.32%)</title><rect x="400.6" y="179.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="403.6" y="190.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_init (2 samples, 0.13%)</title><rect x="400.6" y="163.0" width="1.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="403.6" y="174.0"></text>
</g>
<g>
<title>__strlen_sse2_pminub (1 samples, 0.06%)</title><rect x="402.1" y="163.0" width="0.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="405.1" y="174.0"></text>
</g>
<g>
<title>os::PlatformMonitor::PlatformMonitor() (1 samples, 0.06%)</title><rect x="402.8" y="163.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="405.8" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_init@plt (1 samples, 0.06%)</title><rect x="403.6" y="163.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="406.6" y="174.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.13%)</title><rect x="404.3" y="211.0" width="1.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="407.3" y="222.0"></text>
</g>
<g>
<title>os::Posix::get_initial_stack_size(os::ThreadType, unsigned long) (5 samples, 0.32%)</title><rect x="405.8" y="211.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="408.8" y="222.0"></text>
</g>
<g>
<title>os::pd_start_thread(Thread*) (3 samples, 0.19%)</title><rect x="409.6" y="227.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="412.6" y="238.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.06%)</title><rect x="411.1" y="211.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="414.1" y="222.0"></text>
</g>
<g>
<title>os::set_native_priority(Thread*, int) (1 samples, 0.06%)</title><rect x="411.9" y="227.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="414.9" y="238.0"></text>
</g>
<g>
<title>Threads::add(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="412.6" y="243.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="415.6" y="254.0"></text>
</g>
<g>
<title>[unknown] (697 samples, 44.54%)</title><rect x="413.4" y="243.0" width="525.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="416.4" y="254.0">[unknown]</text>
</g>
<g>
<title>[unknown] (8 samples, 0.51%)</title><rect x="413.4" y="227.0" width="6.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="416.4" y="238.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.38%)</title><rect x="413.4" y="211.0" width="4.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="416.4" y="222.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.19%)</title><rect x="413.4" y="195.0" width="2.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="416.4" y="206.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.13%)</title><rect x="413.4" y="179.0" width="1.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="416.4" y="190.0"></text>
</g>
<g>
<title>malloc_consolidate (2 samples, 0.13%)</title><rect x="413.4" y="163.0" width="1.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="416.4" y="174.0"></text>
</g>
<g>
<title>malloc_consolidate (1 samples, 0.06%)</title><rect x="414.9" y="179.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="417.9" y="190.0"></text>
</g>
<g>
<title>__GI__dl_allocate_tls_init (2 samples, 0.13%)</title><rect x="415.6" y="195.0" width="1.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="418.6" y="206.0"></text>
</g>
<g>
<title>mempcpy (1 samples, 0.06%)</title><rect x="417.2" y="195.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="420.2" y="206.0"></text>
</g>
<g>
<title>malloc_consolidate (2 samples, 0.13%)</title><rect x="417.9" y="211.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="420.9" y="222.0"></text>
</g>
<g>
<title>_IO_str_init_static_internal (1 samples, 0.06%)</title><rect x="419.4" y="227.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="422.4" y="238.0"></text>
</g>
<g>
<title>__GI__dl_allocate_tls_init (2 samples, 0.13%)</title><rect x="420.2" y="227.0" width="1.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="423.2" y="238.0"></text>
</g>
<g>
<title>__clone (466 samples, 29.78%)</title><rect x="421.7" y="227.0" width="351.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="424.7" y="238.0">__clone</text>
</g>
<g>
<title>stub_clone (465 samples, 29.71%)</title><rect x="422.4" y="211.0" width="350.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="425.4" y="222.0">stub_clone</text>
</g>
<g>
<title>sys_clone (465 samples, 29.71%)</title><rect x="422.4" y="195.0" width="350.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="425.4" y="206.0">sys_clone</text>
</g>
<g>
<title>__put_user_4 (1 samples, 0.06%)</title><rect x="423.2" y="179.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="426.2" y="190.0"></text>
</g>
<g>
<title>do_fork (463 samples, 29.58%)</title><rect x="423.9" y="179.0" width="349.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="426.9" y="190.0">do_fork</text>
</g>
<g>
<title>copy_process (310 samples, 19.81%)</title><rect x="424.7" y="163.0" width="233.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="427.7" y="174.0">copy_process</text>
</g>
<g>
<title>__alloc_pages_nodemask (15 samples, 0.96%)</title><rect x="448.1" y="147.0" width="11.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="451.1" y="158.0"></text>
</g>
<g>
<title>get_page_from_freelist (13 samples, 0.83%)</title><rect x="448.8" y="131.0" width="9.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="451.8" y="142.0"></text>
</g>
<g>
<title>__zone_watermark_ok (2 samples, 0.13%)</title><rect x="457.1" y="115.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="460.1" y="126.0"></text>
</g>
<g>
<title>next_zones_zonelist (1 samples, 0.06%)</title><rect x="458.6" y="131.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="461.6" y="142.0"></text>
</g>
<g>
<title>__delayacct_tsk_init (2 samples, 0.13%)</title><rect x="459.4" y="147.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="462.4" y="158.0"></text>
</g>
<g>
<title>__memset (1 samples, 0.06%)</title><rect x="459.4" y="131.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="462.4" y="142.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.06%)</title><rect x="460.1" y="131.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="463.1" y="142.0"></text>
</g>
<g>
<title>__slab_alloc (1 samples, 0.06%)</title><rect x="460.1" y="115.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="463.1" y="126.0"></text>
</g>
<g>
<title>__memset (4 samples, 0.26%)</title><rect x="460.9" y="147.0" width="3.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="463.9" y="158.0"></text>
</g>
<g>
<title>__raw_write_unlock_irq.constprop.27 (7 samples, 0.45%)</title><rect x="463.9" y="147.0" width="5.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="466.9" y="158.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.06%)</title><rect x="469.2" y="147.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="472.2" y="158.0"></text>
</g>
<g>
<title>account_kernel_stack (1 samples, 0.06%)</title><rect x="469.9" y="147.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="472.9" y="158.0"></text>
</g>
<g>
<title>mod_zone_page_state (1 samples, 0.06%)</title><rect x="469.9" y="131.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="472.9" y="142.0"></text>
</g>
<g>
<title>alloc_pid (14 samples, 0.89%)</title><rect x="470.7" y="147.0" width="10.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="473.7" y="158.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.06%)</title><rect x="480.5" y="131.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="483.5" y="142.0"></text>
</g>
<g>
<title>__slab_alloc (1 samples, 0.06%)</title><rect x="480.5" y="115.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="483.5" y="126.0"></text>
</g>
<g>
<title>arch_dup_task_struct (26 samples, 1.66%)</title><rect x="481.2" y="147.0" width="19.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="484.2" y="158.0"></text>
</g>
<g>
<title>kmem_cache_alloc (9 samples, 0.58%)</title><rect x="494.1" y="131.0" width="6.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="497.1" y="142.0"></text>
</g>
<g>
<title>__slab_alloc (5 samples, 0.32%)</title><rect x="497.1" y="115.0" width="3.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="500.1" y="126.0"></text>
</g>
<g>
<title>cgroup_can_fork (6 samples, 0.38%)</title><rect x="500.8" y="147.0" width="4.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="503.8" y="158.0"></text>
</g>
<g>
<title>pids_can_fork (6 samples, 0.38%)</title><rect x="500.8" y="131.0" width="4.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="503.8" y="142.0"></text>
</g>
<g>
<title>__css_tryget (3 samples, 0.19%)</title><rect x="503.1" y="115.0" width="2.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="506.1" y="126.0"></text>
</g>
<g>
<title>cgroup_fork (1 samples, 0.06%)</title><rect x="505.4" y="147.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="508.4" y="158.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.06%)</title><rect x="505.4" y="131.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="508.4" y="142.0"></text>
</g>
<g>
<title>cgroup_post_fork (14 samples, 0.89%)</title><rect x="506.1" y="147.0" width="10.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="509.1" y="158.0"></text>
</g>
<g>
<title>__css_put (1 samples, 0.06%)</title><rect x="511.4" y="131.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="514.4" y="142.0"></text>
</g>
<g>
<title>__list_add (3 samples, 0.19%)</title><rect x="512.2" y="131.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="515.2" y="142.0"></text>
</g>
<g>
<title>_raw_write_lock (2 samples, 0.13%)</title><rect x="514.4" y="131.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="517.4" y="142.0"></text>
</g>
<g>
<title>pids_fork (1 samples, 0.06%)</title><rect x="515.9" y="131.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="518.9" y="142.0"></text>
</g>
<g>
<title>__css_tryget (1 samples, 0.06%)</title><rect x="515.9" y="115.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="518.9" y="126.0"></text>
</g>
<g>
<title>copy_creds (4 samples, 0.26%)</title><rect x="516.7" y="147.0" width="3.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="519.7" y="158.0"></text>
</g>
<g>
<title>copy_namespaces (1 samples, 0.06%)</title><rect x="519.7" y="147.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="522.7" y="158.0"></text>
</g>
<g>
<title>copy_semundo (7 samples, 0.45%)</title><rect x="520.5" y="147.0" width="5.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="523.5" y="158.0"></text>
</g>
<g>
<title>copy_thread (7 samples, 0.45%)</title><rect x="525.7" y="147.0" width="5.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="528.7" y="158.0"></text>
</g>
<g>
<title>down_read (5 samples, 0.32%)</title><rect x="531.0" y="147.0" width="3.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="534.0" y="158.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (7 samples, 0.45%)</title><rect x="534.8" y="147.0" width="5.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="537.8" y="158.0"></text>
</g>
<g>
<title>__slab_alloc (4 samples, 0.26%)</title><rect x="537.0" y="131.0" width="3.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="540.0" y="142.0"></text>
</g>
<g>
<title>new_slab (2 samples, 0.13%)</title><rect x="538.5" y="115.0" width="1.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="541.5" y="126.0"></text>
</g>
<g>
<title>alloc_pages_current (2 samples, 0.13%)</title><rect x="538.5" y="99.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="541.5" y="110.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (2 samples, 0.13%)</title><rect x="538.5" y="83.0" width="1.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="541.5" y="94.0"></text>
</g>
<g>
<title>get_page_from_freelist (2 samples, 0.13%)</title><rect x="538.5" y="67.0" width="1.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="541.5" y="78.0"></text>
</g>
<g>
<title>ktime_get_ts64 (2 samples, 0.13%)</title><rect x="540.1" y="147.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="543.1" y="158.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.06%)</title><rect x="540.8" y="131.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="543.8" y="142.0"></text>
</g>
<g>
<title>native_read_tsc (1 samples, 0.06%)</title><rect x="540.8" y="115.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="543.8" y="126.0"></text>
</g>
<g>
<title>mutex_unlock (1 samples, 0.06%)</title><rect x="541.6" y="147.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="544.6" y="158.0"></text>
</g>
<g>
<title>perf_event_init_task (13 samples, 0.83%)</title><rect x="542.3" y="147.0" width="9.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="545.3" y="158.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (6 samples, 0.38%)</title><rect x="543.8" y="131.0" width="4.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="546.8" y="142.0"></text>
</g>
<g>
<title>mutex_unlock (2 samples, 0.13%)</title><rect x="548.4" y="131.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="551.4" y="142.0"></text>
</g>
<g>
<title>perf_unpin_context (3 samples, 0.19%)</title><rect x="549.9" y="131.0" width="2.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="552.9" y="142.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.06%)</title><rect x="549.9" y="115.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="552.9" y="126.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.13%)</title><rect x="550.6" y="115.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="553.6" y="126.0"></text>
</g>
<g>
<title>proc_fork_connector (123 samples, 7.86%)</title><rect x="552.1" y="147.0" width="92.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="555.1" y="158.0">proc_fork_c..</text>
</g>
<g>
<title>cn_netlink_send (122 samples, 7.80%)</title><rect x="552.1" y="131.0" width="92.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="555.1" y="142.0">cn_netlink_..</text>
</g>
<g>
<title>__alloc_skb (5 samples, 0.32%)</title><rect x="553.6" y="115.0" width="3.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="556.6" y="126.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.30 (1 samples, 0.06%)</title><rect x="555.1" y="99.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="558.1" y="110.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (1 samples, 0.06%)</title><rect x="555.1" y="83.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="558.1" y="94.0"></text>
</g>
<g>
<title>ksize (2 samples, 0.13%)</title><rect x="555.9" y="99.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="558.9" y="110.0"></text>
</g>
<g>
<title>netlink_broadcast (114 samples, 7.28%)</title><rect x="557.4" y="115.0" width="86.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="560.4" y="126.0">netlink_br..</text>
</g>
<g>
<title>netlink_broadcast_filtered (113 samples, 7.22%)</title><rect x="557.4" y="99.0" width="85.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="560.4" y="110.0">netlink_br..</text>
</g>
<g>
<title>__netlink_sendskb (39 samples, 2.49%)</title><rect x="563.4" y="83.0" width="29.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="566.4" y="94.0">__..</text>
</g>
<g>
<title>sock_def_readable (39 samples, 2.49%)</title><rect x="563.4" y="67.0" width="29.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="566.4" y="78.0">so..</text>
</g>
<g>
<title>__wake_up_sync_key (33 samples, 2.11%)</title><rect x="568.0" y="51.0" width="24.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="571.0" y="62.0">_..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (33 samples, 2.11%)</title><rect x="568.0" y="35.0" width="24.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="571.0" y="46.0">_..</text>
</g>
<g>
<title>__wake_up (2 samples, 0.13%)</title><rect x="592.8" y="83.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="595.8" y="94.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.06%)</title><rect x="592.8" y="67.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="595.8" y="78.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.06%)</title><rect x="593.6" y="67.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="596.6" y="78.0"></text>
</g>
<g>
<title>_raw_read_lock (9 samples, 0.58%)</title><rect x="594.3" y="83.0" width="6.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="597.3" y="94.0"></text>
</g>
<g>
<title>consume_skb (2 samples, 0.13%)</title><rect x="601.1" y="83.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="604.1" y="94.0"></text>
</g>
<g>
<title>netlink_skb_set_owner_r (1 samples, 0.06%)</title><rect x="602.6" y="83.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="605.6" y="94.0"></text>
</g>
<g>
<title>peernet2id (51 samples, 3.26%)</title><rect x="603.4" y="83.0" width="38.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="606.4" y="94.0">pee..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (50 samples, 3.19%)</title><rect x="604.1" y="67.0" width="37.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="607.1" y="78.0">_ra..</text>
</g>
<g>
<title>sock_def_readable (1 samples, 0.06%)</title><rect x="641.8" y="83.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="644.8" y="94.0"></text>
</g>
<g>
<title>netlink_trim (1 samples, 0.06%)</title><rect x="642.6" y="99.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="645.6" y="110.0"></text>
</g>
<g>
<title>netlink_has_listeners (1 samples, 0.06%)</title><rect x="643.4" y="115.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="646.4" y="126.0"></text>
</g>
<g>
<title>ktime_get_ts64 (1 samples, 0.06%)</title><rect x="644.1" y="131.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="647.1" y="142.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.06%)</title><rect x="644.1" y="115.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="647.1" y="126.0"></text>
</g>
<g>
<title>native_read_tsc (1 samples, 0.06%)</title><rect x="644.1" y="99.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="647.1" y="110.0"></text>
</g>
<g>
<title>sched_fork (11 samples, 0.70%)</title><rect x="644.9" y="147.0" width="8.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="647.9" y="158.0"></text>
</g>
<g>
<title>__sched_fork (8 samples, 0.51%)</title><rect x="644.9" y="131.0" width="6.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="647.9" y="142.0"></text>
</g>
<g>
<title>task_fork_fair (3 samples, 0.19%)</title><rect x="650.9" y="131.0" width="2.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="653.9" y="142.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.19%)</title><rect x="650.9" y="115.0" width="2.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="653.9" y="126.0"></text>
</g>
<g>
<title>user_disable_single_step (7 samples, 0.45%)</title><rect x="653.2" y="147.0" width="5.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="656.2" y="158.0"></text>
</g>
<g>
<title>get_random_int (3 samples, 0.19%)</title><rect x="658.4" y="163.0" width="2.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="661.4" y="174.0"></text>
</g>
<g>
<title>wake_up_new_task (149 samples, 9.52%)</title><rect x="660.7" y="163.0" width="112.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="663.7" y="174.0">wake_up_new_task</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (149 samples, 9.52%)</title><rect x="660.7" y="147.0" width="112.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="663.7" y="158.0">_raw_spin_unlo..</text>
</g>
<g>
<title>__lll_unlock_wake_private (1 samples, 0.06%)</title><rect x="773.0" y="227.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="776.0" y="238.0"></text>
</g>
<g>
<title>system_call_fastpath (1 samples, 0.06%)</title><rect x="773.0" y="211.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="776.0" y="222.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.06%)</title><rect x="773.0" y="195.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="776.0" y="206.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.06%)</title><rect x="773.0" y="179.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="776.0" y="190.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.06%)</title><rect x="773.0" y="163.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="776.0" y="174.0"></text>
</g>
<g>
<title>wake_futex (1 samples, 0.06%)</title><rect x="773.0" y="147.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="776.0" y="158.0"></text>
</g>
<g>
<title>wake_up_state (1 samples, 0.06%)</title><rect x="773.0" y="131.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="776.0" y="142.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.06%)</title><rect x="773.0" y="115.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="776.0" y="126.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.06%)</title><rect x="773.8" y="227.0" width="0.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="776.8" y="238.0"></text>
</g>
<g>
<title>__pthread_create_2_1 (19 samples, 1.21%)</title><rect x="774.5" y="227.0" width="14.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="777.5" y="238.0"></text>
</g>
<g>
<title>_int_free (16 samples, 1.02%)</title><rect x="788.9" y="227.0" width="12.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="791.9" y="238.0"></text>
</g>
<g>
<title>_int_malloc (92 samples, 5.88%)</title><rect x="800.9" y="227.0" width="69.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="803.9" y="238.0">_int_ma..</text>
</g>
<g>
<title>do_clone.constprop.4 (5 samples, 0.32%)</title><rect x="870.3" y="227.0" width="3.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="873.3" y="238.0"></text>
</g>
<g>
<title>malloc_consolidate (73 samples, 4.66%)</title><rect x="874.1" y="227.0" width="55.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="877.1" y="238.0">mallo..</text>
</g>
<g>
<title>vsnprintf (13 samples, 0.83%)</title><rect x="929.1" y="227.0" width="9.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="932.1" y="238.0"></text>
</g>
<g>
<title>_IO_vfprintf (9 samples, 0.58%)</title><rect x="929.1" y="211.0" width="6.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="932.1" y="222.0"></text>
</g>
<g>
<title>_itoa_word (2 samples, 0.13%)</title><rect x="935.9" y="211.0" width="1.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="938.9" y="222.0"></text>
</g>
<g>
<title>strchrnul (2 samples, 0.13%)</title><rect x="937.4" y="211.0" width="1.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="940.4" y="222.0"></text>
</g>
<g>
<title>__GI__IO_padn (1 samples, 0.06%)</title><rect x="938.9" y="243.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="941.9" y="254.0"></text>
</g>
<g>
<title>__GI___libc_malloc (102 samples, 6.52%)</title><rect x="939.7" y="243.0" width="76.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="942.7" y="254.0">__GI___l..</text>
</g>
<g>
<title>__GI___mprotect (2 samples, 0.13%)</title><rect x="1016.6" y="243.0" width="1.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1019.6" y="254.0"></text>
</g>
<g>
<title>system_call_fastpath (2 samples, 0.13%)</title><rect x="1016.6" y="227.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1019.6" y="238.0"></text>
</g>
<g>
<title>sys_mprotect (2 samples, 0.13%)</title><rect x="1016.6" y="211.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1019.6" y="222.0"></text>
</g>
<g>
<title>mprotect_fixup (1 samples, 0.06%)</title><rect x="1016.6" y="195.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1019.6" y="206.0"></text>
</g>
<g>
<title>change_protection (1 samples, 0.06%)</title><rect x="1016.6" y="179.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1019.6" y="190.0"></text>
</g>
<g>
<title>change_protection_range (1 samples, 0.06%)</title><rect x="1016.6" y="163.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1019.6" y="174.0"></text>
</g>
<g>
<title>up_write (1 samples, 0.06%)</title><rect x="1017.3" y="195.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1020.3" y="206.0"></text>
</g>
<g>
<title>__libc_free (2 samples, 0.13%)</title><rect x="1018.1" y="243.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1021.1" y="254.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.06%)</title><rect x="1019.6" y="243.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1022.6" y="254.0"></text>
</g>
<g>
<title>system_call_after_swapgs (1 samples, 0.06%)</title><rect x="1019.6" y="227.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1022.6" y="238.0"></text>
</g>
<g>
<title>__lll_lock_wait_private (32 samples, 2.04%)</title><rect x="1020.4" y="243.0" width="24.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1023.4" y="254.0">_..</text>
</g>
<g>
<title>system_call_after_swapgs (2 samples, 0.13%)</title><rect x="1027.1" y="227.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1030.1" y="238.0"></text>
</g>
<g>
<title>system_call_fastpath (21 samples, 1.34%)</title><rect x="1028.6" y="227.0" width="15.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1031.6" y="238.0"></text>
</g>
<g>
<title>sys_futex (21 samples, 1.34%)</title><rect x="1028.6" y="211.0" width="15.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1031.6" y="222.0"></text>
</g>
<g>
<title>do_futex (21 samples, 1.34%)</title><rect x="1028.6" y="195.0" width="15.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1031.6" y="206.0"></text>
</g>
<g>
<title>futex_wait (20 samples, 1.28%)</title><rect x="1029.4" y="179.0" width="15.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1032.4" y="190.0"></text>
</g>
<g>
<title>_raw_spin_unlock (1 samples, 0.06%)</title><rect x="1030.2" y="163.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1033.2" y="174.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.13%)</title><rect x="1030.9" y="163.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1033.9" y="174.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.13%)</title><rect x="1030.9" y="147.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1033.9" y="158.0"></text>
</g>
<g>
<title>__schedule (2 samples, 0.13%)</title><rect x="1030.9" y="131.0" width="1.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1033.9" y="142.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.06%)</title><rect x="1031.7" y="115.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1034.7" y="126.0"></text>
</g>
<g>
<title>futex_wait_setup (15 samples, 0.96%)</title><rect x="1032.4" y="163.0" width="11.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1035.4" y="174.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (8 samples, 0.51%)</title><rect x="1036.2" y="147.0" width="6.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1039.2" y="158.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.06%)</title><rect x="1042.2" y="147.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1045.2" y="158.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.11 (1 samples, 0.06%)</title><rect x="1042.2" y="131.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1045.2" y="142.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.06%)</title><rect x="1043.0" y="147.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1046.0" y="158.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.06%)</title><rect x="1043.7" y="163.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1046.7" y="174.0"></text>
</g>
<g>
<title>__lll_unlock_wake (8 samples, 0.51%)</title><rect x="1044.5" y="243.0" width="6.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1047.5" y="254.0"></text>
</g>
<g>
<title>system_call_after_swapgs (3 samples, 0.19%)</title><rect x="1044.5" y="227.0" width="2.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1047.5" y="238.0"></text>
</g>
<g>
<title>system_call_fastpath (5 samples, 0.32%)</title><rect x="1046.7" y="227.0" width="3.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1049.7" y="238.0"></text>
</g>
<g>
<title>sys_futex (5 samples, 0.32%)</title><rect x="1046.7" y="211.0" width="3.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1049.7" y="222.0"></text>
</g>
<g>
<title>do_futex (5 samples, 0.32%)</title><rect x="1046.7" y="195.0" width="3.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1049.7" y="206.0"></text>
</g>
<g>
<title>futex_wake (4 samples, 0.26%)</title><rect x="1046.7" y="179.0" width="3.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1049.7" y="190.0"></text>
</g>
<g>
<title>get_futex_key (2 samples, 0.13%)</title><rect x="1048.2" y="163.0" width="1.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1051.2" y="174.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.11 (1 samples, 0.06%)</title><rect x="1049.0" y="147.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1052.0" y="158.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.06%)</title><rect x="1049.8" y="179.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1052.8" y="190.0"></text>
</g>
<g>
<title>__lll_unlock_wake_private (55 samples, 3.51%)</title><rect x="1050.5" y="243.0" width="41.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1053.5" y="254.0">__l..</text>
</g>
<g>
<title>system_call_after_swapgs (8 samples, 0.51%)</title><rect x="1052.0" y="227.0" width="6.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1055.0" y="238.0"></text>
</g>
<g>
<title>system_call_fastpath (45 samples, 2.88%)</title><rect x="1058.1" y="227.0" width="33.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1061.1" y="238.0">sy..</text>
</g>
<g>
<title>sys_futex (45 samples, 2.88%)</title><rect x="1058.1" y="211.0" width="33.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1061.1" y="222.0">sy..</text>
</g>
<g>
<title>do_futex (45 samples, 2.88%)</title><rect x="1058.1" y="195.0" width="33.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1061.1" y="206.0">do..</text>
</g>
<g>
<title>_raw_spin_unlock (1 samples, 0.06%)</title><rect x="1058.8" y="179.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1061.8" y="190.0"></text>
</g>
<g>
<title>futex_wake (42 samples, 2.68%)</title><rect x="1059.6" y="179.0" width="31.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1062.6" y="190.0">fu..</text>
</g>
<g>
<title>_raw_spin_lock (7 samples, 0.45%)</title><rect x="1067.9" y="163.0" width="5.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1070.9" y="174.0"></text>
</g>
<g>
<title>drop_futex_key_refs.isra.12 (2 samples, 0.13%)</title><rect x="1073.1" y="163.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1076.1" y="174.0"></text>
</g>
<g>
<title>get_futex_key (11 samples, 0.70%)</title><rect x="1074.6" y="163.0" width="8.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1077.6" y="174.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.11 (11 samples, 0.70%)</title><rect x="1074.6" y="147.0" width="8.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1077.6" y="158.0"></text>
</g>
<g>
<title>wake_futex (11 samples, 0.70%)</title><rect x="1082.9" y="163.0" width="8.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1085.9" y="174.0"></text>
</g>
<g>
<title>wake_up_state (10 samples, 0.64%)</title><rect x="1083.7" y="147.0" width="7.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1086.7" y="158.0"></text>
</g>
<g>
<title>try_to_wake_up (10 samples, 0.64%)</title><rect x="1083.7" y="131.0" width="7.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1086.7" y="142.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (10 samples, 0.64%)</title><rect x="1083.7" y="115.0" width="7.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1086.7" y="126.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.06%)</title><rect x="1091.2" y="179.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1094.2" y="190.0"></text>
</g>
<g>
<title>__pthread_create_2_1 (5 samples, 0.32%)</title><rect x="1092.0" y="243.0" width="3.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1095.0" y="254.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (7 samples, 0.45%)</title><rect x="1095.8" y="243.0" width="5.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1098.8" y="254.0"></text>
</g>
<g>
<title>_int_malloc (4 samples, 0.26%)</title><rect x="1101.0" y="243.0" width="3.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1104.0" y="254.0"></text>
</g>
<g>
<title>do_clone.constprop.4 (1 samples, 0.06%)</title><rect x="1104.0" y="243.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1107.0" y="254.0"></text>
</g>
<g>
<title>system_call_after_swapgs (1 samples, 0.06%)</title><rect x="1104.0" y="227.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1107.0" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (5 samples, 0.32%)</title><rect x="1104.8" y="243.0" width="3.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1107.8" y="254.0"></text>
</g>
<g>
<title>sysmalloc (7 samples, 0.45%)</title><rect x="1108.6" y="243.0" width="5.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1111.6" y="254.0"></text>
</g>
<g>
<title>page_fault (7 samples, 0.45%)</title><rect x="1108.6" y="227.0" width="5.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1111.6" y="238.0"></text>
</g>
<g>
<title>do_page_fault (7 samples, 0.45%)</title><rect x="1108.6" y="211.0" width="5.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1111.6" y="222.0"></text>
</g>
<g>
<title>__do_page_fault (7 samples, 0.45%)</title><rect x="1108.6" y="195.0" width="5.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1111.6" y="206.0"></text>
</g>
<g>
<title>handle_mm_fault (5 samples, 0.32%)</title><rect x="1110.1" y="179.0" width="3.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1113.1" y="190.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.06%)</title><rect x="1110.1" y="163.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1113.1" y="174.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.06%)</title><rect x="1110.1" y="147.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1113.1" y="158.0"></text>
</g>
<g>
<title>clear_page_c_e (1 samples, 0.06%)</title><rect x="1110.1" y="131.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1113.1" y="142.0"></text>
</g>
<g>
<title>mem_cgroup_newpage_charge (4 samples, 0.26%)</title><rect x="1110.8" y="163.0" width="3.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1113.8" y="174.0"></text>
</g>
<g>
<title>mem_cgroup_charge_common (4 samples, 0.26%)</title><rect x="1110.8" y="147.0" width="3.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1113.8" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH.0x0000000800114800.invoke (2 samples, 0.13%)</title><rect x="1113.8" y="259.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1116.8" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (1 samples, 0.06%)</title><rect x="1115.4" y="259.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1118.4" y="270.0"></text>
</g>
<g>
<title>org/openjdk/bench/java/lang/thread/ThreadBench$1.newThread (6 samples, 0.38%)</title><rect x="1116.1" y="275.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1119.1" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH.0x0000000800113000.invoke_MT (6 samples, 0.38%)</title><rect x="1116.1" y="259.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1119.1" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH.0x0000000800114800.invoke (5 samples, 0.32%)</title><rect x="1116.9" y="243.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1119.9" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH.0x0000000800112800.newInvokeSpecial (5 samples, 0.32%)</title><rect x="1116.9" y="227.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1119.9" y="238.0"></text>
</g>
<g>
<title>java/lang/Thread.&lt;init&gt; (2 samples, 0.13%)</title><rect x="1117.6" y="211.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1120.6" y="222.0"></text>
</g>
<g>
<title>java/lang/Thread$ThreadIdentifiers.next (1 samples, 0.06%)</title><rect x="1117.6" y="195.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1120.6" y="206.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.06%)</title><rect x="1118.4" y="195.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1121.4" y="206.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.06%)</title><rect x="1118.4" y="179.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1121.4" y="190.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.06%)</title><rect x="1118.4" y="163.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1121.4" y="174.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.06%)</title><rect x="1118.4" y="147.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1121.4" y="158.0"></text>
</g>
<g>
<title>page_add_new_anon_rmap (1 samples, 0.06%)</title><rect x="1118.4" y="131.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1121.4" y="142.0"></text>
</g>
<g>
<title>lru_cache_add (1 samples, 0.06%)</title><rect x="1118.4" y="115.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1121.4" y="126.0"></text>
</g>
<g>
<title>__lru_cache_add (1 samples, 0.06%)</title><rect x="1118.4" y="99.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1121.4" y="110.0"></text>
</g>
<g>
<title>pagevec_lru_move_fn (1 samples, 0.06%)</title><rect x="1118.4" y="83.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1121.4" y="94.0"></text>
</g>
<g>
<title>release_pages (1 samples, 0.06%)</title><rect x="1118.4" y="67.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1121.4" y="78.0"></text>
</g>
<g>
<title>page_fault (2 samples, 0.13%)</title><rect x="1119.1" y="211.0" width="1.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1122.1" y="222.0"></text>
</g>
<g>
<title>do_page_fault (2 samples, 0.13%)</title><rect x="1119.1" y="195.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1122.1" y="206.0"></text>
</g>
<g>
<title>__do_page_fault (2 samples, 0.13%)</title><rect x="1119.1" y="179.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1122.1" y="190.0"></text>
</g>
<g>
<title>handle_mm_fault (2 samples, 0.13%)</title><rect x="1119.1" y="163.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1122.1" y="174.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.06%)</title><rect x="1119.1" y="147.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1122.1" y="158.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.06%)</title><rect x="1119.1" y="131.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1122.1" y="142.0"></text>
</g>
<g>
<title>clear_page_c_e (1 samples, 0.06%)</title><rect x="1119.1" y="115.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1122.1" y="126.0"></text>
</g>
<g>
<title>mem_cgroup_newpage_charge (1 samples, 0.06%)</title><rect x="1119.9" y="147.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1122.9" y="158.0"></text>
</g>
<g>
<title>mem_cgroup_charge_common (1 samples, 0.06%)</title><rect x="1119.9" y="131.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1122.9" y="142.0"></text>
</g>
<g>
<title>start_thread (92 samples, 5.88%)</title><rect x="1120.6" y="547.0" width="69.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1123.6" y="558.0">start_t..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (92 samples, 5.88%)</title><rect x="1120.6" y="531.0" width="69.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1123.6" y="542.0">thread_..</text>
</g>
<g>
<title>Thread::call_run() (92 samples, 5.88%)</title><rect x="1120.6" y="515.0" width="69.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.6" y="526.0">Thread:..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (91 samples, 5.81%)</title><rect x="1120.6" y="499.0" width="68.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.6" y="510.0">JavaThr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2 samples, 0.13%)</title><rect x="1120.6" y="483.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.6" y="494.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2 samples, 0.13%)</title><rect x="1120.6" y="467.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.6" y="478.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*) (2 samples, 0.13%)</title><rect x="1120.6" y="451.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.6" y="462.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*) (2 samples, 0.13%)</title><rect x="1120.6" y="435.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.6" y="446.0"></text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.06%)</title><rect x="1120.6" y="419.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.6" y="430.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.06%)</title><rect x="1120.6" y="403.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.6" y="414.0"></text>
</g>
<g>
<title>TypeAry::singleton() const (1 samples, 0.06%)</title><rect x="1120.6" y="387.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.6" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1121.4" y="419.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.4" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="1121.4" y="403.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="1121.4" y="387.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1121.4" y="371.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1121.4" y="355.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="1121.4" y="339.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.4" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1121.4" y="323.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1124.4" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1121.4" y="307.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.4" y="318.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="1121.4" y="291.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1124.4" y="302.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.06%)</title><rect x="1121.4" y="275.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.4" y="286.0"></text>
</g>
<g>
<title>MonitorDeflationThread::monitor_deflation_thread_entry(JavaThread*, JavaThread*) (9 samples, 0.58%)</title><rect x="1122.1" y="483.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.1" y="494.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_idle_monitors() (9 samples, 0.58%)</title><rect x="1122.1" y="467.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.1" y="478.0"></text>
</g>
<g>
<title>MonitorList::unlink_deflated(Thread*, LogStream*, elapsedTimer*, GrowableArray&lt;ObjectMonitor*&gt;*) (5 samples, 0.32%)</title><rect x="1122.9" y="451.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.9" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::deflate_monitor() (2 samples, 0.13%)</title><rect x="1126.7" y="451.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.7" y="462.0"></text>
</g>
<g>
<title>OopStorage::release(oopDesc* const*) (1 samples, 0.06%)</title><rect x="1128.2" y="451.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.2" y="462.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, JavaThread*) (48 samples, 3.07%)</title><rect x="1128.9" y="483.0" width="36.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.9" y="494.0">Ser..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;548964ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 548964ul&gt;::oop_access_barrier(void*, oopDesc*) (3 samples, 0.19%)</title><rect x="1135.0" y="467.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.0" y="478.0"></text>
</g>
<g>
<title>Monitor::wait_without_safepoint_check(long) (11 samples, 0.70%)</title><rect x="1137.2" y="467.0" width="8.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.2" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_wait (9 samples, 0.58%)</title><rect x="1137.2" y="451.0" width="6.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1140.2" y="462.0"></text>
</g>
<g>
<title>system_call_fastpath (8 samples, 0.51%)</title><rect x="1138.0" y="435.0" width="6.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1141.0" y="446.0"></text>
</g>
<g>
<title>sys_futex (8 samples, 0.51%)</title><rect x="1138.0" y="419.0" width="6.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1141.0" y="430.0"></text>
</g>
<g>
<title>do_futex (7 samples, 0.45%)</title><rect x="1138.0" y="403.0" width="5.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1141.0" y="414.0"></text>
</g>
<g>
<title>futex_wait (7 samples, 0.45%)</title><rect x="1138.0" y="387.0" width="5.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1141.0" y="398.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.06%)</title><rect x="1138.0" y="371.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1141.0" y="382.0"></text>
</g>
<g>
<title>futex_wait_setup (6 samples, 0.38%)</title><rect x="1138.7" y="371.0" width="4.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1141.7" y="382.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.06%)</title><rect x="1142.5" y="355.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1145.5" y="366.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.11 (1 samples, 0.06%)</title><rect x="1142.5" y="339.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1145.5" y="350.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.06%)</title><rect x="1143.3" y="403.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1146.3" y="414.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.06%)</title><rect x="1144.0" y="451.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1147.0" y="462.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.06%)</title><rect x="1144.8" y="451.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1147.8" y="462.0"></text>
</g>
<g>
<title>Mutex::lock_without_safepoint_check() (9 samples, 0.58%)</title><rect x="1145.5" y="467.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.5" y="478.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (3 samples, 0.19%)</title><rect x="1145.5" y="451.0" width="2.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1148.5" y="462.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (3 samples, 0.19%)</title><rect x="1147.8" y="451.0" width="2.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1150.8" y="462.0"></text>
</g>
<g>
<title>update_get_addr (3 samples, 0.19%)</title><rect x="1150.0" y="451.0" width="2.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1153.0" y="462.0"></text>
</g>
<g>
<title>OopStorage::has_cleanup_work_and_reset() (2 samples, 0.13%)</title><rect x="1152.3" y="467.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.3" y="478.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.06%)</title><rect x="1153.1" y="451.0" width="0.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1156.1" y="462.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.06%)</title><rect x="1153.1" y="435.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1156.1" y="446.0"></text>
</g>
<g>
<title>OopStorage::release(oopDesc* const*) (5 samples, 0.32%)</title><rect x="1153.8" y="467.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.8" y="478.0"></text>
</g>
<g>
<title>OopStorage::Block::release_entries(unsigned long, OopStorage*) (2 samples, 0.13%)</title><rect x="1156.1" y="451.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.1" y="462.0"></text>
</g>
<g>
<title>ThreadBlockInVMPreprocess&lt;void (JavaThread*)&gt;::~ThreadBlockInVMPreprocess() (10 samples, 0.64%)</title><rect x="1157.6" y="467.0" width="7.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.6" y="478.0"></text>
</g>
<g>
<title>ThreadBlockInVMPreprocess&lt;void (JavaThread*)&gt;::~ThreadBlockInVMPreprocess() (1 samples, 0.06%)</title><rect x="1165.1" y="483.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.1" y="494.0"></text>
</g>
<g>
<title>__libc_free (3 samples, 0.19%)</title><rect x="1165.9" y="483.0" width="2.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1168.9" y="494.0"></text>
</g>
<g>
<title>__lll_unlock_wake (25 samples, 1.60%)</title><rect x="1168.1" y="483.0" width="18.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1171.1" y="494.0"></text>
</g>
<g>
<title>system_call_fastpath (24 samples, 1.53%)</title><rect x="1168.9" y="467.0" width="18.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1171.9" y="478.0"></text>
</g>
<g>
<title>sys_futex (24 samples, 1.53%)</title><rect x="1168.9" y="451.0" width="18.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1171.9" y="462.0"></text>
</g>
<g>
<title>do_futex (23 samples, 1.47%)</title><rect x="1169.6" y="435.0" width="17.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1172.6" y="446.0"></text>
</g>
<g>
<title>futex_wake (22 samples, 1.41%)</title><rect x="1169.6" y="419.0" width="16.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1172.6" y="430.0"></text>
</g>
<g>
<title>get_futex_key (17 samples, 1.09%)</title><rect x="1173.4" y="403.0" width="12.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1176.4" y="414.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.11 (17 samples, 1.09%)</title><rect x="1173.4" y="387.0" width="12.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1176.4" y="398.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.06%)</title><rect x="1186.2" y="419.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1189.2" y="430.0"></text>
</g>
<g>
<title>os::free(void*) (1 samples, 0.06%)</title><rect x="1187.0" y="483.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.0" y="494.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.13%)</title><rect x="1187.7" y="483.0" width="1.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1190.7" y="494.0"></text>
</g>
<g>
<title>WorkerThread::run() (1 samples, 0.06%)</title><rect x="1189.2" y="499.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.2" y="510.0"></text>
</g>
<g>
<title>G1EvacuateRegionsBaseTask::work(unsigned int) (1 samples, 0.06%)</title><rect x="1189.2" y="483.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.2" y="494.0"></text>
</g>
<g>
<title>G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.06%)</title><rect x="1189.2" y="467.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.2" y="478.0"></text>
</g>
<g>
<title>G1RemSet::scan_heap_roots(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, bool) (1 samples, 0.06%)</title><rect x="1189.2" y="451.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.2" y="462.0"></text>
</g>
<g>
<title>G1ScanHRForRegionClosure::scan_heap_roots(HeapRegion*) (1 samples, 0.06%)</title><rect x="1189.2" y="435.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.2" y="446.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.06%)</title><rect x="1189.2" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.2" y="430.0"></text>
</g>
</g>
</svg>
